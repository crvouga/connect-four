{"version":3,"sources":["registerServiceWorker.js","constants/index.js","selectors/index.js","actions/index.js","components/Button.js","components/Feedback.js","components/Discs.js","components/Columns.js","components/Consecutives.js","components/Board.js","components/Dialogs.js","components/Notifier.js","components/App.js","components/index.js","reducer/game.js","reducer/settings.js","reducer/notifications.js","reducer/index.js","sagas/computer.js","sagas/socket.js","sagas/index.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Player","PlayerType","pathOrTail","R","keys","obj","undefined","notifications","theme","isConfetti","columns","offlinePlayer","opponentType","isSocketConnected","isSocketNotConnected","createSelector","roomId","joinRoomError","isWaitingForRematch","isOpponentWaitingForRematch","consecutives","visited","Set","i","length","j","di","dj","has","consecutive","ii","jj","add","push","countDisc","isEven","currentPlayer","winningConsecutives","isNotEmpty","isWin","isTie","COLUMN_COUNT","isGameStart","isGameOver","isGameNotOver","oppositePlayer","winner","loser","isOpponentOnline","computerPlayerTypes","isComputerPlayerType","isOpponentComputer","currentPlayerType","isTurnOffline","isTurnComputer","isTurn","playerType","isColumnFull","columnIndex","isColumnNotFull","enqueueSnackbar","notification","key","options","Date","getTime","Math","random","createActions","DROP_DISC","RESTART_GAME","CHANGE_TEAM","CHANGE_OPPONENT","REMATCH","START_ROOM","JOIN_ROOM","LEAVE_ROOM","REQUEST_REMATCH","CONNECTION","DISCONNECTION","STARTED_ROOM","JOIN_ROOM_ERROR","JOINED_ROOM","ROOM_JOINED","ENDED_ROOM","ROOM_ENDED","SOCKET_ACTION","TOGGLE_THEME","TOGGLE_CONFETTI","SUCCESS","payload","variant","INFO","WARNING","ERROR","GameButton","useSelector","selectors","dispatch","useDispatch","Button","disabled","size","fullWidth","color","onClick","actions","changeTeam","Box","fontWeight","fontSize","not","restartGame","requestRematch","LinearProgress","DiscIcon","props","SvgIcon","viewBox","cx","cy","r","useStyles","makeStyles","palette","main","warning","light","textAlign","text","secondary","animationName","animationDuration","animationTimingFunction","animationIterationCount","opacity","Feedback","classes","player","className","clsx","feedback","blinking","value","discEnter","rowIndex","node","gsap","fromTo","attr","ease","discExit","to","delay","Discs","useTheme","id","offset","stopColor","dark","TransitionGroup","component","transform","map","column","Transition","timeout","onEnter","onExit","fill","cursor","Column","dropDisc","x","y","width","height","Columns","Fragment","patternUnits","gradientTransform","info","times","pointerEvents","mask","root","stroke","strokeWidth","distance","x1","y1","x2","y2","angleBetween","atan2","PI","Consecutive","isIn","in","juxt","head","last","sortBy","westIndex","eastIndex","n","getTotalLength","strokeDasharray","strokeDashoffset","draw","getElementsByTagName","unDraw","unmountOnExit","ROW_COUNT","rx","Consecutives","Board","SlideRight","React","forwardRef","ref","Slide","direction","SlideLeft","ZoomIn","Zoom","JoinRoomDialog","connectModal","name","destroyOnHide","isOpen","show","submit","cancel","useState","roomIdText","setRoomIdText","useEffect","drop","Dialog","open","onClose","TransitionComponent","DialogTitle","DialogContent","TextField","autoFocus","type","pattern","inputMode","isNil","helperText","prop","onChange","target","DialogActions","StartRoomDialog","display","Grid","container","justify","item","CircularProgress","DialogContentText","LeaveRoomDialog","interceptedAction","hide","leaveRoom","SettingsDialog","List","ListSubheader","ListItemText","primary","ListItem","button","toggleConfetti","ListItemIcon","Switch","checked","toggleTheme","Divider","Link","href","underline","MenuDialog","guardedDispatch","action","handleChangeOpponent","changeOpponent","startRoom","joinRoom","Dialogs","displayed","Notifier","useSnackbar","closeSnackbar","forEach","message","dismissed","includes","event","reason","myKey","onExited","removeSnackbar","filter","lightTheme","createMuiTheme","darkTheme","userSelect","marginTop","spacing","padding","success","backgroundColor","App","themeType","ThemeProvider","CssBaseline","disableWindowBlurListener","preventDuplicate","autoHideDuration","anchorOrigin","vertical","horizontal","variantSuccess","variantError","variantWarning","variantInfo","maxSnack","Container","maxWidth","IconButton","style","marginLeft","active","config","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","colors","emptyColumns","repeat","initialState","reducer","handleActions","when","over","lensPath","o","take","append","mergeLeft","evolve","mergeRight","rematch","pipe","cond","equals","always","T","identity","socketAction","opponentAction","combineActions","roomJoined","joinedRoom","disconnection","roomEnded","connection","startedRoom","endedRoom","__","dismissAll","combineReducers","game","modal","settings","computerDropDisc","blockUntil","computerSaga","columnIndexes","checkWinConditions","alphabeta","AlphaBetaConstructor","scoreFunction","callback","score","path","current","generateMoves","successors","nextPlayer","successor","JSON","parse","stringify","uniqueKey","select","alphabetaConfig","depth","setup","all","call","Promise","resolve","allSteps","bestState","put","predicate","race","notificationsSaga","joinRoomSaga","startRoomSaga","leaveRoomSaga","inGameSaga","readSocketSaga","socketSaga","opponentWantsRematch","takeEvery","socket","takeLatest","CANCEL","SUBMIT","emit","fork","createSocketChannel","eventChannel","values","on","channel","io","playerTypeEmoji","emoji","propOr","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","logger","run","sagas","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.dcea5925.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","export const ROW_COUNT = 6\nexport const COLUMN_COUNT = 7\nexport const WIN_COUNT = 4\n\nexport const Player = {\n  One: 'One',\n  Two: 'Two',\n}\n\nexport const PlayerType = {\n  Offline: 'Offline',\n  Online: 'Online',\n  EasyComputer: 'Easy Computer',\n  MediumComputer: 'Medium Computer',\n  HardComputer: 'Hard Computer',\n}\n","import * as R from \"ramda\";\nimport { createSelector } from \"reselect\";\nimport {\n  COLUMN_COUNT,\n  Player,\n  PlayerType,\n  ROW_COUNT,\n  WIN_COUNT,\n} from \"../constants\";\nconst pathOrTail = R.curry((keys, obj) =>\n  R.isEmpty(keys)\n    ? undefined\n    : R.pathOr(pathOrTail(R.tail(keys), obj), keys, obj)\n);\n\nexport const notifications = R.prop(\"notifications\");\n\nexport const theme = pathOrTail([\"settings\", \"theme\"]);\n\nexport const isConfetti = pathOrTail([\"settings\", \"isConfetti\"]);\n\nexport const columns = pathOrTail([\"game\", \"columns\"]);\n\nexport const offlinePlayer = pathOrTail([\"game\", \"offlinePlayer\"]);\n\nexport const opponentType = pathOrTail([\"game\", \"opponentType\"]);\n\nexport const isSocketConnected = pathOrTail([\"game\", \"isSocketConnected\"]);\n\nexport const isSocketNotConnected = createSelector(isSocketConnected, R.not);\n\nexport const roomId = pathOrTail([\"game\", \"roomId\"]);\n\nexport const joinRoomError = pathOrTail([\"game\", \"joinRoomError\"]);\n\nexport const isWaitingForRematch = pathOrTail([\"game\", \"isWaitingForRematch\"]);\n\nexport const isOpponentWaitingForRematch = pathOrTail([\n  \"game\",\n  \"isOpponentWaitingForRematch\",\n]);\n\nexport const consecutives = createSelector(columns, (columns) => {\n  const consecutives = [];\n  const visited = new Set();\n  for (let i = 0; i < columns.length; i++) {\n    for (let j = 0; j < columns[i].length; j++) {\n      for (const [di, dj] of [\n        [1, 1],\n        [1, -1],\n        [1, 0],\n        [0, 1],\n      ]) {\n        if (visited.has(\"\" + di + dj + i + j)) {\n          continue;\n        }\n        const consecutive = [];\n        let ii = i,\n          jj = j;\n        while (columns[i][j] === (columns[ii] || [])[jj]) {\n          visited.add(\"\" + di + dj + ii + jj);\n          consecutive.push([ii, jj]);\n          ii += di;\n          jj += dj;\n        }\n        if (consecutive.length >= 2) {\n          consecutives.push(consecutive);\n        }\n      }\n    }\n  }\n  return consecutives;\n});\n\nexport const countDisc = createSelector(\n  columns,\n  R.compose(R.length, R.flatten)\n);\n\nconst isEven = R.pipe(R.modulo(R.__, 2), R.equals(0));\n\nexport const currentPlayer = createSelector(\n  countDisc,\n  R.ifElse(isEven, R.always(Player.One), R.always(Player.Two))\n);\n\nexport const winningConsecutives = createSelector(\n  consecutives,\n  R.filter(R.compose(R.lte(WIN_COUNT), R.length))\n);\n\nconst isNotEmpty = R.complement(R.isEmpty);\n\nexport const isWin = createSelector(winningConsecutives, isNotEmpty);\n\nexport const isNotWin = createSelector(isWin, R.not);\n\nexport const isTie = createSelector(\n  countDisc,\n  R.equals(COLUMN_COUNT * ROW_COUNT)\n);\n\nexport const isGameStart = createSelector(countDisc, R.equals(0));\n\nexport const isGameNotStart = createSelector(isGameStart, R.not);\n\nexport const isGameOver = createSelector(isWin, isTie, R.or);\n\nexport const isGameNotOver = createSelector(isGameOver, R.not);\n\nexport const oppositePlayer = R.ifElse(\n  R.equals(Player.One),\n  R.always(Player.Two),\n  R.always(Player.One)\n);\n\nexport const winner = createSelector(\n  isWin,\n  currentPlayer,\n  (isWin, currentPlayer) => isWin && oppositePlayer(currentPlayer)\n);\n\nexport const loser = createSelector(winner, oppositePlayer);\n\nexport const isOpponentOffline = createSelector(\n  opponentType,\n  R.equals(PlayerType.Offline)\n);\n\nexport const isOpponentOnline = createSelector(\n  opponentType,\n  R.equals(PlayerType.Online)\n);\n\nconst computerPlayerTypes = [\n  PlayerType.EasyComputer,\n  PlayerType.MediumComputer,\n  PlayerType.HardComputer,\n];\n\nexport const isComputerPlayerType = R.includes(R.__, computerPlayerTypes);\n\nexport const isOpponentComputer = createSelector(\n  opponentType,\n  isComputerPlayerType\n);\n\nexport const currentPlayerType = createSelector(\n  currentPlayer,\n  offlinePlayer,\n  opponentType,\n  (currentPlayer, offlinePlayer, opponentType) =>\n    currentPlayer === offlinePlayer ? PlayerType.Offline : opponentType\n);\n\nexport const isTurnOffline = createSelector(\n  currentPlayerType,\n  R.equals(PlayerType.Offline)\n);\n\nexport const isTurnNotOffline = createSelector(isTurnOffline, R.not);\n\nexport const isTurnComputer = createSelector(\n  currentPlayerType,\n  isComputerPlayerType\n);\n\nexport const isTurnOnline = createSelector(\n  currentPlayerType,\n  R.equals(PlayerType.Online)\n);\n\nexport const isTurn = R.curry(\n  (playerType, state) =>\n    isGameNotOver(state) && currentPlayerType(state) === playerType\n);\n\nexport const isColumnFull = R.curry(\n  (columnIndex, state) =>\n    R.length(R.prop(columnIndex, columns(state))) >= ROW_COUNT\n);\n\nexport const isColumnNotFull = R.complement(isColumnFull);\n","import { createActions } from \"redux-actions\";\n\nexport const ENQUEUE_SNACKBAR = \"ENQUEUE_SNACKBAR\";\nexport const CLOSE_SNACKBAR = \"CLOSE_SNACKBAR\";\nexport const REMOVE_SNACKBAR = \"REMOVE_SNACKBAR\";\n\nexport const enqueueSnackbar = notification => {\n  const key = notification.options && notification.options.key;\n  return {\n    ...notification,\n    key: key || new Date().getTime() + Math.random()\n  };\n};\n\nexport const closeSnackbar = key => ({\n  type: CLOSE_SNACKBAR,\n  dismissAll: !key, // dismiss all if no key has been defined\n  key\n});\n\nexport const removeSnackbar = key => ({\n  type: REMOVE_SNACKBAR,\n  key\n});\n\nexport default createActions({\n  /* Game */\n  DROP_DISC: (playerType, columnIndex) => ({ playerType, columnIndex }),\n  RESTART_GAME: undefined,\n  CHANGE_TEAM: undefined,\n  CHANGE_OPPONENT: playerType => ({ playerType }),\n\n  /* Socket */\n  REMATCH: undefined,\n  START_ROOM: undefined,\n  JOIN_ROOM: undefined,\n  LEAVE_ROOM: undefined,\n  REQUEST_REMATCH: undefined,\n  CONNECTION: undefined,\n  DISCONNECTION: undefined,\n  STARTED_ROOM: undefined,\n  JOIN_ROOM_ERROR: undefined,\n  JOINED_ROOM: undefined,\n  ROOM_JOINED: undefined,\n  ENDED_ROOM: undefined,\n  ROOM_ENDED: undefined,\n  SOCKET_ACTION: undefined,\n\n  /* settings */\n  TOGGLE_THEME: undefined,\n  TOGGLE_CONFETTI: undefined,\n  \n  /* notifications */\n  SUCCESS: payload =>\n    enqueueSnackbar({\n      ...payload,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: \"success\"\n      }\n    }),\n  INFO: payload =>\n    enqueueSnackbar({\n      ...payload,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: \"info\"\n      }\n    }),\n  WARNING: payload =>\n    enqueueSnackbar({\n      ...payload,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: \"warning\"\n      }\n    }),\n  ERROR: payload =>\n    enqueueSnackbar({\n      ...payload,\n      options: {\n        key: new Date().getTime() + Math.random(),\n        variant: \"error\"\n      }\n    })\n});\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport * as selectors from \"../selectors\";\nimport actions from \"../actions\";\nimport { not } from \"ramda\";\nimport { Player } from \"../constants\";\n\nconst GameButton = () => {\n  const isOpponentOnline = useSelector(selectors.isOpponentOnline);\n  const isOpponentComputer = useSelector(selectors.isOpponentComputer);\n  const isGameOver = useSelector(selectors.isGameOver);\n  const isGameStart = useSelector(selectors.isGameStart);\n  const isWaitingForRematch = useSelector(selectors.isWaitingForRematch);\n  const isOpponentWaitingForRematch = useSelector(\n    selectors.isOpponentWaitingForRematch\n  );\n  const offlinePlayer = useSelector(selectors.offlinePlayer);\n  const dispatch = useDispatch();\n\n  const handleRestartGame = () => {\n    dispatch(actions.restartGame());\n  };\n\n  const handleRematch = () => {\n    dispatch(actions.requestRematch());\n  };\n\n  const handleChangeTeam = () => {\n    dispatch(actions.changeTeam());\n  };\n\n  return (\n    <>\n      {isGameStart && isOpponentComputer ? (\n        <Button\n          disabled={offlinePlayer === Player.Two}\n          size=\"large\"\n          fullWidth\n          color=\"secondary\"\n          onClick={handleChangeTeam}\n        >\n          <Box fontWeight=\"bold\" fontSize=\"large\">\n            Change Team\n          </Box>\n        </Button>\n      ) : not(isOpponentOnline) && not(isGameStart) ? (\n        <Button\n          size=\"large\"\n          fullWidth\n          color={\"secondary\"}\n          variant={isGameOver ? \"contained\" : \"text\"}\n          onClick={handleRestartGame}\n        >\n          <Box fontWeight=\"bold\" fontSize=\"large\">\n            {isGameOver ? \"Play Again\" : \"Restart Game\"}\n          </Box>\n        </Button>\n      ) : isGameOver && isOpponentOnline ? (\n        <>\n          <Button\n            size=\"large\"\n            disabled={isWaitingForRematch}\n            fullWidth\n            color=\"secondary\"\n            variant=\"contained\"\n            onClick={handleRematch}\n          >\n            <Box fontWeight=\"bold\" fontSize=\"large\">\n              {isWaitingForRematch\n                ? \"Waiting for opponent...\"\n                : isOpponentWaitingForRematch\n                ? \"Rematch?\"\n                : \"Play Again\"}\n            </Box>\n          </Button>\n          {isWaitingForRematch && (\n            <LinearProgress color=\"secondary\" variant=\"query\" />\n          )}\n        </>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n\nexport default GameButton;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Box from \"@material-ui/core/Box\";\nimport SvgIcon from \"@material-ui/core/SvgIcon\";\nimport ComputerIcon from \"@material-ui/icons/Computer\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport PublicIcon from \"@material-ui/icons/Public\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport SentimentVerySatisfiedIcon from \"@material-ui/icons/SentimentVerySatisfied\";\nimport SentimentVeryDissatisfiedIcon from \"@material-ui/icons/SentimentVeryDissatisfied\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Player } from \"../constants\";\nimport * as selectors from \"../selectors\";\nimport clsx from \"clsx\";\n\nconst DiscIcon = props => (\n  <SvgIcon {...props}>\n    <svg viewBox={[0, 0, 2, 2]}>\n      <circle cx={1} cy={1} r={1} />\n    </svg>\n  </SvgIcon>\n);\n\nconst useStyles = makeStyles(theme => ({\n  [Player.One]: {\n    color: theme.palette.error.main,\n    fontSize: \"inherit\"\n  },\n\n  [Player.Two]: {\n    color: theme.palette.warning.light,\n    fontSize: \"inherit\"\n  },\n\n  feedback: {\n    textAlign: \"center\",\n    fontSize: \"large\",\n    fontWeight: \"bold\",\n    color: theme.palette.text.secondary\n  },\n\n  blinking: {\n    animationName: \"$blinker\",\n    animationDuration: \"1s\",\n    animationTimingFunction: \"linear\",\n    animationIterationCount: \"infinite\"\n  },\n\n  \"@keyframes blinker\": {\n    \"0%\": { opacity: 1 },\n    \"50%\": { opacity: 0.3 },\n    \"100%\": { opacity: 1 }\n  }\n}));\n\nconst Feedback = () => {\n  const currentPlayer = useSelector(selectors.currentPlayer);\n  const isTie = useSelector(selectors.isTie);\n  const isWin = useSelector(selectors.isWin);\n  const isGameOver = useSelector(selectors.isGameOver);\n  const isGameStart = useSelector(selectors.isGameStart);\n  const isOpponentComputer = useSelector(selectors.isOpponentComputer);\n  const isOpponentOnline = useSelector(selectors.isOpponentOnline);\n  const isTurnOffline = useSelector(selectors.isTurnOffline);\n  const winner = useSelector(selectors.winner);\n  const loser = useSelector(selectors.loser);\n  const classes = useStyles({\n    player: currentPlayer\n  });\n  return (\n    <Box\n      className={clsx(classes.feedback, {\n        [classes.blinking]: !isGameOver && isOpponentOnline && isTurnOffline\n      })}\n    >\n      {isWin ? (\n        <>\n          <DiscIcon className={classes[winner]} />{\" \"}\n          <SentimentVerySatisfiedIcon fontSize=\"inherit\" /> Winner{\" \"}\n          <DiscIcon className={classes[loser]} />{\" \"}\n          <SentimentVeryDissatisfiedIcon fontSize=\"inherit\" /> Loser\n        </>\n      ) : isTie ? (\n        <>\n          <DiscIcon className={classes[Player.One]} /> Tie{\" \"}\n          <DiscIcon className={classes[Player.Two]} />{\" \"}\n        </>\n      ) : isGameStart && isOpponentComputer && isTurnOffline ? (\n        <>Drop Disc or Change Team</>\n      ) : isOpponentOnline ? (\n        <>\n          <DiscIcon className={classes[currentPlayer]} />{\" \"}\n          {isTurnOffline ? (\n            <>\n              <PersonIcon fontSize=\"inherit\" /> Your Turn\n            </>\n          ) : (\n            <>\n              <PublicIcon fontSize=\"inherit\" /> Opponent's Turn\n            </>\n          )}\n        </>\n      ) : (\n        <>\n          <DiscIcon className={classes[currentPlayer]} />{\" \"}\n          {isTurnOffline ? (\n            <>\n              <PersonIcon fontSize=\"inherit\" /> Turn\n            </>\n          ) : (\n            <>\n              <ComputerIcon fontSize=\"inherit\" /> Turn\n            </>\n          )}\n        </>\n      )}\n      <LinearProgress\n        color={isTurnOffline || isGameOver ? \"\" : \"secondary\"}\n        variant={isTurnOffline || isGameOver ? \"determinate\" : \"query\"}\n        value={100}\n      />\n    </Box>\n  );\n};\n\nexport default Feedback;\n","import React from 'react'\nimport { \n  useSelector\n} from 'react-redux'\nimport gsap from \"gsap\"\nimport Transition from 'react-transition-group/Transition'\nimport TransitionGroup from 'react-transition-group/TransitionGroup'\nimport { \n  ROW_COUNT, \n  COLUMN_COUNT,\n  Player,\n} from '../constants';\nimport * as selectors from '../selectors'\nimport red from '@material-ui/core/colors/red'\nimport yellow from '@material-ui/core/colors/yellow'\nimport grey from '@material-ui/core/colors/grey'\nimport { useTheme } from '@material-ui/styles';\n\nconst discEnter = (columnIndex, rowIndex) => node => {\n  gsap.fromTo(\n    node,\n    0.2 + 0.3 * (1 - (rowIndex / ROW_COUNT)),\n    {attr: {cx: columnIndex, cy: ROW_COUNT,}},\n    {attr: {cx: columnIndex, cy: rowIndex,}, ease: \"bounce.out\",},\n  )\n}\n\nconst discExit = (columnIndex) => node => {\n  gsap.to(\n    node,\n    0.5,\n    {delay: (columnIndex / COLUMN_COUNT) * 0.5, attr: {cy: `-=${ROW_COUNT}`,}, ease: \"back.in(1.2)\"},\n  )\n}\n\nconst Discs = () => {\n  const columns = useSelector(selectors.columns)\n  const theme = useTheme()\n\n  return (\n    <>\n      <defs>\n        <radialGradient id={Player.One} >\n          <stop offset=\"0%\" stopColor={theme.palette.error.main}/>\n          <stop offset=\"100%\" stopColor={theme.palette.error.dark}/>\n        </radialGradient>\n        <radialGradient id={Player.Two} >\n          <stop offset=\"50%\" stopColor={theme.palette.warning.light}/>\n          <stop offset=\"100%\" stopColor={theme.palette.warning.main}/>\n        </radialGradient>\n      </defs>\n      <TransitionGroup component=\"g\" transform=\"translate(0.5, 0.5)\">\n        {columns.map((column, columnIndex) => column.map((player, rowIndex) =>\n          <Transition\n            key={`${columnIndex} ${rowIndex}`}\n            timeout={1000}\n            onEnter={discEnter(columnIndex, rowIndex)}\n            onExit={discExit(columnIndex)}\n            >\n            <circle cx={-1} cy={-1} r={0.5} fill={`url(#${player})`} />\n          </Transition>\n        ))}\n      </TransitionGroup>\n    </>\n  )\n}\n\nexport default Discs","import React from 'react'\nimport  { \n  useDispatch, \n  useSelector,\n} from 'react-redux'\nimport {\n  times,\n} from 'ramda'\nimport { \n  makeStyles \n} from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport { \n  ROW_COUNT, \n  COLUMN_COUNT, \n  PlayerType, \n} from '../constants'\nimport actions from '../actions'\nimport * as selectors from '../selectors'\nimport { useTheme } from '@material-ui/styles';\n\nconst useStyles = makeStyles(theme => ({\n  column: { \n    cursor: ({ isGameOver, isColumnFull }) => \n      isGameOver ? 'default' :\n      isColumnFull ? 'not-allowed' : \n      'pointer'\n  },\n}))\n\nconst Column = (props) => {\n  const { columnIndex } = props\n  const isGameOver = useSelector(selectors.isGameOver)\n  const isColumnFull = useSelector(selectors.isColumnFull(columnIndex))\n  const classes = useStyles({isColumnFull, isGameOver})\n  const dispatch = useDispatch()\n\n  const handleClick = () => {\n    dispatch(actions.dropDisc(PlayerType.Offline, columnIndex))\n  }\n\n  return (\n    <rect \n      onClick={handleClick}\n      x={columnIndex}\n      y={0}\n      width={1}\n      height={ROW_COUNT}\n      fill=\"transparent\"\n      className={classes.column}\n      />\n  )\n}\n\nconst Columns = () => {\n  const theme = useTheme()\n  console.log({theme})\n  return (\n    <React.Fragment>\n      <defs>\n        <pattern id=\"cell-pattern\" patternUnits=\"userSpaceOnUse\" width=\"1\" height=\"1\">\n          <circle  cx=\"0.5\" cy=\"0.5\" r=\"0.45\" fill=\"black\"></circle>\n        </pattern>\n        <mask id=\"hole-mask\">\n          <rect width=\"10\" height=\"60\" fill=\"white\"></rect>\n          <rect width=\"10\" height=\"60\" fill=\"url(#cell-pattern)\"></rect>\n        </mask>\n        <linearGradient id='column' gradientTransform=\"rotate(90)\">\n          <stop offset=\"0%\" stopColor={theme.palette.info.dark}/>\n          <stop offset=\"100%\" stopColor={theme.palette.info.main}/>\n        </linearGradient>\n      </defs>\n      {times((columnIndex) => \n        <Column  key={columnIndex} columnIndex={columnIndex} />, \n        COLUMN_COUNT\n      )}\n      <rect \n        x={0} \n        y={0} \n        pointerEvents=\"none\"\n        width={COLUMN_COUNT} \n        height={ROW_COUNT} \n        mask=\"url(#hole-mask)\"\n        fill=\"url(#column)\"\n        />\n    </React.Fragment>\n  )\n}\n\nexport default Columns","import React from 'react'\nimport { \n  useSelector \n} from 'react-redux'\nimport Transition from 'react-transition-group/Transition'\nimport TransitionGroup from 'react-transition-group/TransitionGroup'\nimport gsap from \"gsap\"\nimport { \n  makeStyles, useTheme \n} from '@material-ui/core';\nimport blue from '@material-ui/core/colors/blue';\nimport {\n  juxt,\n  sortBy,\n  head,\n  last,\n} from 'ramda'\nimport { \n  ROW_COUNT, \n  COLUMN_COUNT \n} from '../constants';\nimport * as selectors from '../selectors';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    stroke: theme.palette.text.secondary,\n    strokeWidth: 150,\n    fill: 'transparent',\n    pointerEvents: 'none',\n  },\n}))\n\nconst draw = (node) => {\n  const length = node.getTotalLength()\n  gsap.fromTo(\n    node,\n    0.7,\n    {strokeDasharray: length, strokeDashoffset: length},\n    {strokeDashoffset: 0},\n  )\n}\n\nconst unDraw = (node) => {\n  const length = node.getTotalLength()\n  gsap.to(\n    node,\n    0.5,\n    {strokeDasharray: length, strokeDashoffset: length},\n  )\n}\n\nconst distance = ([x1, y1], [x2, y2]) =>\n  ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\nconst angleBetween = ([x1, y1], [x2, y2]) =>\n  Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI\n\nconst Consecutive = (props) => {\n  const classes = useStyles()\n\n  const { consecutive, in: isIn } = props\n  \n  const [westIndex, eastIndex] =\n    juxt([head, last])(sortBy(head, consecutive))\n\n  const [i, j] = westIndex\n\n  /* Have to increase the viewBox so that the draw animation is smooth >:-{ */\n  const n = 1000\n  return (\n    <Transition\n      in={isIn}\n      key={consecutive}\n      timeout={1000}\n      onEnter={(node) => draw(node.getElementsByTagName('rect')[0])}\n      onExit={(node) => unDraw(node.getElementsByTagName('rect')[0])}\n      unmountOnExit\n      >\n      <svg\n        x={0}\n        y={0}\n        width={COLUMN_COUNT}\n        height={ROW_COUNT}\n        viewBox={`0 0 ${COLUMN_COUNT*n} ${ROW_COUNT*n}`}>\n        <rect\n          transform={`\n            rotate(${angleBetween(westIndex, eastIndex)} ${[(i+0.5)*n, (j+0.5)*n]})\n          `}\n          x={i*n}\n          y={j*n}\n          width={(distance(westIndex, eastIndex)+1)*n}\n          height={n}\n          rx={n/2}\n          className={classes.root}\n          />\n      </svg>\n    </Transition>\n  )\n}\n\nconst Consecutives = () => {\n  const consecutives = useSelector(selectors.winningConsecutives)\n  return (\n    <TransitionGroup component=\"g\">\n      {consecutives.map((consecutive) => (\n        <Consecutive key={consecutive} consecutive={consecutive}/>\n      ))}\n    </TransitionGroup>\n  )\n}\n\n\nexport default Consecutives","import React from 'react'\nimport { \n  COLUMN_COUNT, \n  ROW_COUNT, \n} from \"../constants\";\nimport Discs from \"./Discs\"\nimport Columns from \"./Columns\"\nimport Consecutives from \"./Consecutives\"\n\nconst Board = () => {\n  return (\n    <svg viewBox={[0, 0, COLUMN_COUNT, ROW_COUNT]}>\n      <g transform={`translate(0, ${ROW_COUNT}) scale(1,-1)`}>\n        <Discs />\n        <Columns />\n        <Consecutives />\n      </g>\n    </svg>\n  )\n}\n\nexport default Board","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ComputerIcon from \"@material-ui/icons/Computer\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport PublicIcon from \"@material-ui/icons/Public\";\nimport Box from \"@material-ui/core/Box\";\nimport Divider from \"@material-ui/core/Divider\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport LinkIcon from \"@material-ui/icons/Link\";\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\";\nimport Brightness7Icon from \"@material-ui/icons/Brightness7\";\nimport Link from \"@material-ui/core/Link\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { not, isNil, prop, drop } from \"ramda\";\nimport { connectModal, hide, show } from \"redux-modal\";\nimport * as selectors from \"../selectors\";\nimport actions from \"../actions\";\nimport { PlayerType } from \"../constants\";\nimport Slide from \"@material-ui/core/Slide\";\nimport Zoom from \"@material-ui/core/Zoom\";\nimport { Typography } from \"@material-ui/core\";\n\nconst SlideRight = React.forwardRef((props, ref) => {\n  return <Slide direction=\"right\" ref={ref} {...props} />;\n});\n\nconst SlideLeft = React.forwardRef((props, ref) => {\n  return <Slide direction=\"left\" ref={ref} {...props} />;\n});\n\nconst ZoomIn = React.forwardRef((props, ref) => {\n  return <Zoom ref={ref} {...props} />;\n});\n\nconst JoinRoomDialog = connectModal({ name: \"joinRoom\", destroyOnHide: false })(\n  props => {\n    const { show: isOpen, submit, cancel } = props;\n    const dispatch = useDispatch();\n    const [roomIdText, setRoomIdText] = useState(\"\");\n    const error = useSelector(selectors.joinRoomError);\n\n    const maxLength = 3;\n    useEffect(() => {\n      if (roomIdText.length > maxLength) {\n        setRoomIdText(drop(maxLength));\n      }\n      if (roomIdText.length < maxLength) {\n        dispatch(actions.joinRoomError(undefined));\n      }\n      if (roomIdText.length === maxLength) {\n        dispatch(submit(roomIdText));\n      }\n    }, [roomIdText]);\n\n    const handleChange = ({ target: { value: roomIdText } }) => {\n      setRoomIdText(roomIdText);\n    };\n\n    const onClose = () => {\n      setRoomIdText(\"\");\n      dispatch(actions.joinRoomError(undefined));\n      dispatch(cancel());\n    };\n\n    const handleJoin = () => {\n      dispatch(submit(roomIdText));\n    };\n\n    return (\n      <Dialog open={isOpen} onClose={onClose} TransitionComponent={ZoomIn}>\n        <DialogTitle>What game number?</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus={true}\n            type=\"tel\"\n            pattern=\"[0-9]*\"\n            inputMode=\"numeric\"\n            variant=\"outlined\"\n            color=\"primary\"\n            error={not(isNil(error))}\n            helperText={prop(\"reason\", error)}\n            value={roomIdText}\n            onChange={handleChange}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"primary\" onClick={handleJoin}>\n            Join\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n);\n\nconst StartRoomDialog = connectModal({\n  name: \"startRoom\",\n  destroyOnHide: false\n})(props => {\n  const { show: isOpen, cancel } = props;\n  const roomId = useSelector(selectors.roomId);\n  const dispatch = useDispatch();\n\n  return (\n    <Dialog\n      open={isOpen}\n      onClose={() => dispatch(cancel())}\n      TransitionComponent={ZoomIn}\n    >\n      <DialogTitle>\n        Game number is{\" \"}\n        <Box display=\"inline\" fontWeight=\"bold\" color=\"primary\">\n          {roomId}\n        </Box>\n      </DialogTitle>\n      <DialogContent>\n        <Grid container justify=\"center\">\n          <Grid item>\n            <CircularProgress />\n          </Grid>\n        </Grid>\n        <DialogContentText>Waiting for opponent to join...</DialogContentText>\n      </DialogContent>\n    </Dialog>\n  );\n});\n\nconst LeaveRoomDialog = connectModal({\n  name: \"leaveRoom\",\n  destroyOnHide: false\n})(props => {\n  const { show: isOpen, interceptedAction } = props;\n  const dispatch = useDispatch();\n  const handleLeave = () => {\n    dispatch(actions.leaveRoom());\n    dispatch(hide(\"leaveRoom\"));\n    dispatch(interceptedAction);\n  };\n  const onClose = () => {\n    dispatch(hide(\"leaveRoom\"));\n  };\n  return (\n    <Dialog open={isOpen} onClose={onClose} TransitionComponent={ZoomIn}>\n      <DialogTitle>Are you sure you want to leave game?</DialogTitle>\n      <DialogContent></DialogContent>\n      <DialogActions>\n        <Button color=\"primary\" onClick={handleLeave}>\n          Leave\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n});\n\nconst SettingsDialog = connectModal({ name: \"settings\", destroyOnHide: false })(\n  props => {\n    const { show: isOpen } = props;\n    const theme = useSelector(selectors.theme);\n    const isConfetti = useSelector(selectors.isConfetti);\n\n    const dispatch = useDispatch();\n\n    const onClose = () => {\n      dispatch(hide(\"settings\"));\n    };\n\n    const toggleTheme = () => {\n      dispatch(actions.toggleTheme());\n    };\n\n    const toggleConfetti = () => {\n      dispatch(actions.toggleConfetti());\n    };\n\n    return (\n      <Dialog\n        open={isOpen}\n        onClose={onClose}\n        direction=\"right\"\n        TransitionComponent={SlideLeft}\n      >\n        <List>\n          <ListSubheader>\n            <ListItemText primary=\"Settings\" />\n          </ListSubheader>\n\n\n          <ListItem button onClick={toggleConfetti}>\n            <ListItemIcon>\n              <Switch checked={isConfetti} />\n            </ListItemIcon>\n            <ListItemText\n              primary=\"Toggle Confetti\"\n              secondary={isConfetti ? \"Confetti On\" : \"Confetti Off\"}\n            />\n          </ListItem>\n\n\n          <ListItem button onClick={toggleTheme}>\n            <ListItemIcon>\n              {theme === \"light\" ? <Brightness4Icon /> : <Brightness7Icon />}\n            </ListItemIcon>\n            <ListItemText\n              primary=\"Toggle Theme\"\n              secondary={theme === \"light\" ? \"Light Theme\" : \"Dark Theme\"}\n            />\n          </ListItem>\n\n          <Divider />\n\n          <Link\n            href=\"https://github.com/crvouga/connect-four\"\n            underline=\"none\"\n            color=\"inherit\"\n          >\n            <ListItem button>\n              <ListItemIcon>\n                <GitHubIcon fontSize=\"large\" />\n              </ListItemIcon>\n              <ListItemText primary=\"Github Repository\" />\n            </ListItem>\n          </Link>\n        </List>\n      </Dialog>\n    );\n  }\n);\n\nconst MenuDialog = connectModal({ name: \"menu\", destroyOnHide: false })(\n  props => {\n    const { show: isOpen } = props;\n    const isOpponentOnline = useSelector(selectors.isOpponentOnline);\n    const isSocketNotConnected = useSelector(selectors.isSocketNotConnected);\n    const dispatch = useDispatch();\n    const onClose = () => {\n      dispatch(hide(\"menu\"));\n    };\n    const guardedDispatch = action => {\n      onClose();\n      if (isOpponentOnline) {\n        dispatch(show(\"leaveRoom\", { interceptedAction: action }));\n      } else {\n        dispatch(action);\n      }\n    };\n\n    const handleChangeOpponent = playerType => () => {\n      guardedDispatch(actions.changeOpponent(playerType));\n    };\n\n    const handleStartRoom = () => {\n      guardedDispatch(actions.startRoom());\n    };\n\n    const handelJoinRoom = () => {\n      guardedDispatch(actions.joinRoom());\n    };\n\n    return (\n      <Dialog\n        open={isOpen}\n        onClose={onClose}\n        direction=\"right\"\n        TransitionComponent={SlideRight}\n      >\n        <List>\n          <ListSubheader>\n            <ListItemText primary=\"New Game\" />\n          </ListSubheader>\n\n          <Divider />\n\n          <ListSubheader>\n            <ListItemText primary=\"Play against a friend\" />\n          </ListSubheader>\n\n          <ListItem\n            button\n            disabled={isSocketNotConnected}\n            onClick={handleStartRoom}\n          >\n            <ListItemIcon>\n              <PublicIcon fontSize=\"large\" />\n            </ListItemIcon>\n            <ListItemText primary=\"Start Game\" />\n          </ListItem>\n\n          <ListItem\n            button\n            disabled={isSocketNotConnected}\n            onClick={handelJoinRoom}\n          >\n            <ListItemIcon>\n              <PublicIcon fontSize=\"large\" />\n            </ListItemIcon>\n            <ListItemText primary=\"Join Game\" />\n          </ListItem>\n\n          <ListItem button onClick={handleChangeOpponent(PlayerType.Offline)}>\n            <ListItemIcon>\n              <PersonIcon fontSize=\"large\" />\n            </ListItemIcon>\n            <ListItemText primary=\"Offline\" />\n          </ListItem>\n\n          <ListSubheader>\n            <ListItemText primary=\"Play against a computer\" />\n          </ListSubheader>\n\n          <ListItem\n            button\n            onClick={handleChangeOpponent(PlayerType.EasyComputer)}\n          >\n            <ListItemIcon>\n              <ComputerIcon fontSize=\"large\" />\n            </ListItemIcon>\n            <ListItemText primary=\"Easy\" />\n          </ListItem>\n\n          <ListItem\n            button\n            onClick={handleChangeOpponent(PlayerType.MediumComputer)}\n          >\n            <ListItemIcon>\n              <ComputerIcon fontSize=\"large\" />\n            </ListItemIcon>\n            <ListItemText primary=\"Medium\" />\n          </ListItem>\n\n          <ListItem\n            button\n            onClick={handleChangeOpponent(PlayerType.HardComputer)}\n          >\n            <ListItemIcon>\n              <ComputerIcon fontSize=\"large\" />\n            </ListItemIcon>\n            <ListItemText primary=\"Hard\" />\n          </ListItem>\n        </List>\n      </Dialog>\n    );\n  }\n);\n\nconst Dialogs = () => (\n  <React.Fragment>\n    <SettingsDialog />\n    <MenuDialog />\n    <JoinRoomDialog />\n    <StartRoomDialog />\n    <LeaveRoomDialog />\n  </React.Fragment>\n);\n\nexport default Dialogs;\n","import React from 'react'\nimport {\n  useSelector,\n  useDispatch,   \n} from 'react-redux'\nimport * as selectors from '../selectors'\nimport {  useSnackbar } from 'notistack';\nimport { removeSnackbar } from '../actions';\n\nlet displayed = [];\n\nconst Notifier = () => {\n    const dispatch = useDispatch();\n    const notifications = useSelector(selectors.notifications)\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n    const storeDisplayed = (id) => {\n        displayed = [...displayed, id];\n    };\n\n    const removeDisplayed = (id) => {\n        displayed = [...displayed.filter(key => id !== key)];\n    };\n\n    React.useEffect(() => {\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\n            if (dismissed) {\n                // dismiss snackbar using notistack\n                closeSnackbar(key);\n                return;\n            }\n\n            // do nothing if snackbar is already displayed\n            if (displayed.includes(key)) return;\n\n            // display snackbar using notistack\n            enqueueSnackbar(message, {\n                key,\n                ...options,\n                onClose: (event, reason, myKey) => {\n                    if (options.onClose) {\n                        options.onClose(event, reason, myKey);\n                    }\n                },\n                onExited: (event, myKey) => {\n                    // removen this snackbar from redux store\n                    dispatch(removeSnackbar(myKey));\n                    removeDisplayed(myKey);\n                },\n            });\n\n            // keep track of snackbars that we've displayed\n            storeDisplayed(key);\n        });\n    }, [notifications, closeSnackbar, enqueueSnackbar, dispatch]);\n\n    return null;\n};\n\nexport default Notifier;","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport { ThemeProvider, useTheme } from \"@material-ui/core/styles\";\nimport { SnackbarProvider } from \"notistack\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport FiberNewIcon from '@material-ui/icons/FiberNew';\nimport * as selectors from \"../selectors\";\nimport GameButton from \"./Button\";\nimport Feedback from \"./Feedback\";\nimport Board from \"./Board\";\nimport Dialogs from \"./Dialogs\";\nimport Notifier from \"./Notifier\";\nimport Confetti from \"react-dom-confetti\";\nimport { show } from \"redux-modal\";\nimport { Player } from \"../constants\";\nimport { red, yellow } from \"@material-ui/core/colors\";\nimport { useMediaQuery } from \"@material-ui/core\";\n\nconst lightTheme = createMuiTheme({\n  palette: {\n    type: \"light\"\n  }\n});\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    userSelect: \"none\",\n    marginTop: theme.spacing(1),\n    padding: 0\n  },\n  success: {\n    backgroundColor: theme.palette.success.main\n  },\n  error: {\n    backgroundColor: theme.palette.error.main\n  },\n  warning: {\n    backgroundColor: theme.palette.warning.main\n  },\n  info: {\n    backgroundColor: theme.palette.info.main\n  }\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const themeType = useSelector(selectors.theme);\n  const isConfetti = useSelector(selectors.isConfetti);\n  const isWin = useSelector(selectors.isWin);\n  const winner = useSelector(selectors.winner);\n\n  const theme = useTheme();\n  // const isSmallDevice = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  const handleOpenMenu = () => {\n    dispatch(show(\"menu\"));\n  };\n\n  const handleOpenSettings = () => {\n    dispatch(show(\"settings\"));\n  };\n\n  return (\n    <ThemeProvider theme={themeType === \"light\" ? lightTheme : darkTheme}>\n      <CssBaseline />\n      <SnackbarProvider\n        disableWindowBlurListener\n        preventDuplicate\n        autoHideDuration={3000}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n        classes={{\n          variantSuccess: classes.success,\n          variantError: classes.error,\n          variantWarning: classes.warning,\n          variantInfo: classes.info\n        }}\n        maxSnack={2}\n      >\n        <Container maxWidth=\"xs\" className={classes.root}>\n          <Dialogs />\n          <Notifier />\n          <Grid container justify=\"space-between\">\n            <Grid item>\n              <IconButton onClick={handleOpenMenu}>\n                <FiberNewIcon fontSize=\"large\" />\n              </IconButton>\n            </Grid>\n            <Grid item>\n              <IconButton>\n                <SettingsIcon fontSize=\"large\" onClick={handleOpenSettings} />\n              </IconButton>\n            </Grid>\n          </Grid>\n          <Feedback />\n          <Board />\n          <GameButton />\n          <div style={{ marginLeft: \"50%\" }}>\n            <Confetti\n              //https://daniel-lundin.github.io/react-dom-confetti/\n              style={{\n                width: \"100%\"\n              }}\n              active={isConfetti && isWin}\n              config={{\n                angle: 90,\n                spread: 28,\n                startVelocity: 45,\n                elementCount: 50,\n                dragFriction: 0.1,\n                duration: 3000,\n                stagger: 4,\n                width: \"10px\",\n                height: \"10px\",\n                colors: [winner === Player.One ? theme.palette.error.main : theme.palette.warning.main]\n              }}\n            />\n          </div>\n        </Container>\n      </SnackbarProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import App from './App'\nexport default App","import { \n  handleActions, \n  combineActions,\n} from 'redux-actions'\nimport { \n  repeat,\n  over, \n  lensPath, \n  append, \n  mergeLeft, \n  mergeRight, \n  evolve,\n  when,\n  o,\n  take,\n  pipe,\n  cond,\n  equals,\n  always,\n  T,\n  identity,\n} from 'ramda'\nimport { \n  currentPlayer, \n  isTurn, \n  isOpponentOnline,\n  oppositePlayer,\n  winner,\n  loser,\n} from '../selectors';\nimport { \n  COLUMN_COUNT, \n  ROW_COUNT,\n  Player, \n  PlayerType, \n} from '../constants'\nimport actions from '../actions'\n\nconst emptyColumns = \n  repeat([], COLUMN_COUNT)\n\nconst initialState = {\n  columns: emptyColumns,\n  opponentType: PlayerType.MediumComputer,\n  offlinePlayer: Player.One,\n  /* Socket */\n  isSocketConnected: false,\n  isWaitingForRematch: false,\n  isOpponentWaitingForRematch: false,\n  roomId: undefined,\n  joinRoomError: undefined,\n}\n\nexport const reducer = handleActions(\n  {\n    [actions.dropDisc]: (state, {payload: {playerType, columnIndex}}) => \n      when(\n        isTurn(playerType), \n        over(lensPath(['columns', columnIndex]), o(take(ROW_COUNT), append(currentPlayer(state)))),\n      )(state),\n\n    [actions.restartGame]: \n      mergeLeft({columns: emptyColumns, offlinePlayer: Player.One}),\n\n    [actions.changeTeam]: \n      evolve({offlinePlayer: oppositePlayer}),\n\n    [actions.changeOpponent]: (state, {payload: {playerType}}) =>\n      mergeRight(state, {opponentType: playerType, columns: emptyColumns, offlinePlayer: Player.One}),\n\n    /* \n        Socket\n    */\n\n    [actions.requestRematch]: \n      mergeLeft({isWaitingForRematch: true}),\n\n    [actions.rematch]: (state) =>\n      pipe(\n        mergeLeft({columns: emptyColumns, isWaitingForRematch: false, isOpponentWaitingForRematch: false}),\n        evolve({\n          offlinePlayer:\n            cond([\n              [equals(winner(state)), always(Player.One)],\n              [equals(loser(state)), always(Player.Two)],\n              [T, identity],\n            ]),\n        })\n      )(state),\n\n    [actions.socketAction]: (state, {payload: opponentAction}) =>\n      handleActions(\n        {\n          [actions.dropDisc]: (state, {payload: {columnIndex}}) =>\n            reducer(state, actions.dropDisc(PlayerType.Online, columnIndex)),\n          \n          [actions.requestRematch]:\n            mergeLeft({isOpponentWaitingForRematch: true}),\n        },\n        state,\n      )(state, opponentAction),\n\n    [combineActions(actions.roomJoined, actions.joinedRoom)]:\n      mergeLeft({columns: emptyColumns, opponentType: PlayerType.Online}),\n\n    [actions.roomJoined]: \n      mergeLeft({roomId: undefined, offlinePlayer: Player.One}),\n\n    [actions.joinedRoom]: \n      mergeLeft({offlinePlayer: Player.Two}),\n    \n    [actions.disconnection]:\n      pipe(\n        when(isOpponentOnline, mergeLeft({opponentType: PlayerType.Offline, columns: emptyColumns})),\n        mergeLeft({isSocketConnected: false,}),\n      ),\n\n    [actions.roomEnded]:\n      mergeLeft({opponentType: PlayerType.Offline, columns: emptyColumns}),\n      \n    [combineActions(actions.startRoom, actions.joinRoom)]:\n      when(isOpponentOnline,  mergeLeft({columns: emptyColumns, opponentType: PlayerType.Offline})),\n\n    [actions.connection]:\n      mergeLeft({isSocketConnected: true}),\n\n    [actions.startedRoom]: (state, {payload: roomId}) =>\n      mergeLeft({roomId}, state),\n\n    [actions.joinRoomError]: (state, {payload: error}) => \n      mergeLeft({joinRoomError: error}, state),\n\n    [combineActions(actions.roomEnded, actions.endedRoom, actions.disconnection)]: \n      mergeLeft({isWaitingForRematch: false, roomId: undefined, joinRoomError: undefined}),\n  },\n  initialState,\n)","import { handleActions } from \"redux-actions\";\nimport { evolve, prop, __, not } from \"ramda\";\nimport actions from \"../actions\";\n\nexport const reducer = handleActions(\n  {\n    [actions.toggleTheme]: evolve({\n      theme: prop(__, { light: \"dark\", dark: \"light\" })\n    }),\n    [actions.toggleConfetti]: evolve({ isConfetti: not })\n  },\n  {\n    theme: \"dark\",\n    isConfetti: true\n  }\n);\n","import { combineActions, handleActions } from \"redux-actions\";\nimport actions, { CLOSE_SNACKBAR, REMOVE_SNACKBAR } from \"../actions\";\nimport { append, map, filter } from \"ramda\";\n\nexport const reducer = handleActions(\n  {\n    [combineActions(\n      actions.success,\n      actions.info,\n      actions.error,\n      actions.warning\n    )]: (state, action) =>\n      append(action.payload, state),\n\n    [CLOSE_SNACKBAR]: (state, action) =>\n      map(\n        notification =>\n          action.dismissAll || notification.key === action.key\n            ? { ...notification, dismissed: true }\n            : { ...notification },\n        state\n      ),\n\n    [REMOVE_SNACKBAR]: (state, action) =>\n      filter(notification => notification.key !== action.key, state)\n  },\n  []\n);\n","import {reducer as game} from './game'\nimport {reducer as settings} from './settings'\nimport {reducer as modal} from 'redux-modal'\nimport {reducer as notifications} from './notifications'\nimport { combineReducers } from 'redux';\nexport default combineReducers({\n  game,\n  modal,\n  notifications,\n  settings,\n})","import AlphaBetaConstructor from \"alphabeta\";\nimport {\n  race,\n  take,\n  select,\n  call,\n  put,\n  delay,\n  all,\n  takeEvery\n} from \"@redux-saga/core/effects\";\nimport { PlayerType } from \"../constants\";\nimport * as selectors from \"../selectors\";\nimport actions from \"../actions\";\nimport { prop, path } from \"ramda\";\n\nconst scoreFunction = (state, callback) => {\n  let score = 0;\n  for (const consecutive of selectors.consecutives(state)) {\n    const player = path(consecutive[0], state.columns);\n    if (player === state.current) {\n      score += consecutive.length ** consecutive.length;\n    }\n  }\n  return callback(-score);\n};\n\nconst columnIndexes = [3, 4, 2, 5, 1, 6, 0];\n\nconst generateMoves = state => {\n  const successors = [];\n  const nextPlayer = selectors.oppositePlayer(state.currentPlayer);\n  for (const columnIndex of columnIndexes) {\n    if (selectors.isColumnNotFull(columnIndex, state)) {\n      const successor = JSON.parse(JSON.stringify(state));\n      successor.columns[columnIndex].push(state.currentPlayer);\n      successor.currentPlayer = nextPlayer;\n      successor.columnIndex = columnIndex;\n      successors.push(successor);\n    }\n  }\n  return successors;\n};\n\nconst checkWinConditions = selectors.isWin;\n\nconst alphabeta = AlphaBetaConstructor({\n  scoreFunction,\n  generateMoves,\n  checkWinConditions,\n  uniqueKey: JSON.stringify\n});\n\nfunction* computerDropDisc() {\n  const columns = yield select(selectors.columns);\n  const currentPlayer = yield select(selectors.currentPlayer);\n  const opponentType = yield select(selectors.opponentType);\n  const alphabetaConfig = {\n    state: {\n      columns,\n      currentPlayer,\n      columnIndex: undefined\n    },\n    depth: prop(opponentType, {\n      [PlayerType.EasyComputer]: 3,\n      [PlayerType.MediumComputer]: 4,\n      [PlayerType.HardComputer]: 5\n    })\n  };\n  alphabeta.setup(alphabetaConfig);\n  const [bestState] = yield all([\n    call(() => new Promise(resolve => alphabeta.allSteps(resolve))),\n    delay(1000 / 4)\n  ]);\n  yield put(actions.dropDisc(opponentType, bestState.columnIndex));\n}\n\nfunction* blockUntil(predicate) {\n  while (true) {\n    yield take(\"*\");\n    if (yield select(predicate)) {\n      break;\n    }\n  }\n}\n\nfunction* computerSaga() {\n  while (true) {\n    yield* blockUntil(selectors.isTurnComputer);\n    yield race([call(computerDropDisc), take(\"RESTART_GAME\")]);\n  }\n}\n\nexport default computerSaga;\n","import io from \"socket.io-client\";\nimport { prop, pipe, values, keys, not } from \"ramda\";\nimport { eventChannel } from \"redux-saga\";\nimport {\n  fork,\n  takeEvery,\n  take,\n  put,\n  call,\n  select,\n  all,\n  race,\n  takeLatest,\n  delay\n} from \"@redux-saga/core/effects\";\nimport { createActions } from \"redux-actions\";\nimport { show, hide } from \"redux-modal\";\nimport * as selectors from \"../selectors\";\n\nimport actions from \"../actions\";\n\nconst { success, info, warning, error } = actions;\n\nconst notifications = {\n  CONNECTION: success({\n    message: \"Server connected! 😊\"\n  }),\n  DISCONNECTION: error({\n    message: \"Server disconnected 😑\"\n  }),\n  ROOM_ENDED: error({\n    message: `Opponent lefted game 👋`\n  }),\n  ENDED_ROOM: info({\n    message: `You lefted game 👋`\n  }),\n  STARTED_ROOM: info({\n    message: `You started a game. 🌐`\n  }),\n  JOINED_ROOM: success({\n    message: `You joined someone's game! ⚔️`\n  }),\n  ROOM_JOINED: success({\n    message: `Someone joined your game! ⚔️`\n  }),\n  REMATCH: success({\n    message: `Rematch! ⚔️`\n  }),\n  opponentWantsRematch: info({\n    message: \"Opponent wants a rematch! 🆚\"\n  })\n};\n\nfunction* notificationsSaga() {\n  yield takeEvery(keys(notifications), function*(action) {\n    yield put(prop(action.type, notifications));\n  });\n}\n\nfunction* joinRoomSaga(socket) {\n  yield takeLatest(\"JOIN_ROOM\", function*() {\n    yield put(\n      show(\n        \"joinRoom\",\n        createActions({ CANCEL: undefined, SUBMIT: roomId => roomId })\n      )\n    );\n    yield takeEvery(\"SUBMIT\", function*({ payload: roomId }) {\n      socket.emit(\"joinRoom\", roomId);\n    });\n    yield take([\"DISCONNECTION\", \"CANCEL\", \"JOINED_ROOM\"]);\n    yield put(hide(\"joinRoom\"));\n  });\n}\n\nfunction* startRoomSaga(socket) {\n  yield takeLatest(\"START_ROOM\", function*() {\n    yield put(show(\"startRoom\", createActions({ CANCEL: undefined })));\n    socket.emit(\"startRoom\");\n    yield race([\n      take([\"DISCONNECTION\", \"ROOM_JOINED\"]),\n      call(function*() {\n        yield take(\"CANCEL\");\n        socket.emit(\"leaveRoom\");\n      })\n    ]);\n    yield put(hide(\"startRoom\"));\n  });\n}\n\nfunction* leaveRoomSaga(socket) {\n  yield takeLatest(\"LEAVE_ROOM\", function*() {\n    socket.emit(\"leaveRoom\");\n  });\n}\n\nfunction* inGameSaga(socket) {\n  yield takeEvery([\"DROP_DISC\", \"REQUEST_REMATCH\"], function*(action) {\n    socket.emit(\"socketAction\", action);\n  });\n  yield fork(function*() {\n    while (true) {\n      yield all([\n        take(\"REQUEST_REMATCH\"),\n        call(function*() {\n          while (true) {\n            const { payload: socketAction } = yield take(\"SOCKET_ACTION\");\n            if (socketAction.type === \"REQUEST_REMATCH\") {\n              if (not(yield select(selectors.isWaitingForRematch))) {\n                yield put(notifications.opponentWantsRematch);\n              }\n              break;\n            }\n          }\n        })\n      ]);\n      yield put(actions.rematch());\n    }\n  });\n}\n\nconst createSocketChannel = socket =>\n  eventChannel(emit => {\n    values(actions).forEach(action => {\n      socket.on(\n        action,\n        pipe(\n          action,\n          emit\n        )\n      );\n    });\n    socket.on(\n      \"connect\",\n      pipe(\n        actions.connection,\n        emit\n      )\n    );\n    socket.on(\n      \"disconnect\",\n      pipe(\n        actions.disconnection,\n        emit\n      )\n    );\n    return () => {};\n  });\n\nfunction* readSocketSaga(socket) {\n  yield fork(function*() {\n    const channel = yield call(createSocketChannel, socket);\n    while (true) {\n      const socketAction = yield take(channel);\n      yield put(socketAction);\n    }\n  });\n}\n\nconst IS_IN_DEVELOPMENT_MODE =\n  !process.env.NODE_ENV || process.env.NODE_ENV === \"development\";\nconst socketURL = IS_IN_DEVELOPMENT_MODE ? \"http://localhost:8080/\" : \"\";\n\nfunction* socketSaga() {\n  const socket = io(socketURL);\n  yield* readSocketSaga(socket);\n  yield* notificationsSaga();\n  yield* joinRoomSaga(socket);\n  yield* startRoomSaga(socket);\n  yield* leaveRoomSaga(socket);\n  yield* inGameSaga(socket);\n}\n\nexport default socketSaga;\n","import computerSaga from \"./computer\";\nimport socketSaga from \"./socket\";\nimport { fork, takeEvery, put } from \"redux-saga/effects\";\nimport actions from \"../actions\";\nimport { PlayerType } from \"../constants\";\nimport { has, propOr, toLower } from \"ramda\";\nexport default function*() {\n  yield takeEvery(\"CHANGE_OPPONENT\", function*(action) {\n    const {\n      payload: { playerType }\n    } = action;\n\n    const playerTypeEmoji = {\n      [PlayerType.EasyComputer]: \"📱\",\n      [PlayerType.MediumComputer]: \"🖥️\",\n      [PlayerType.HardComputer]: \"🤖\",\n      [PlayerType.Offline]: \"🙋‍♂\",\n    };\n    if (has(playerType, playerTypeEmoji)) {\n      const emoji = propOr(\"\", playerType, playerTypeEmoji);\n      const message = `Opponent changed to ${playerType} ${emoji}`;\n      yield put(actions.info({ message }));\n    }\n  });\n\n  yield fork(socketSaga);\n  yield fork(computerSaga);\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport createSagaMiddleware from 'redux-saga'\nimport logger from 'redux-logger'\nimport registerServiceWorker from './registerServiceWorker'\n\nimport App from './components'\nimport reducer from './reducer'\nimport sagas from './sagas'\n\nconst sagaMiddleware = \n  createSagaMiddleware()\n  \nconst store =\n  createStore(reducer, applyMiddleware(logger, sagaMiddleware))\n\nsagaMiddleware.run(sagas)\n\nconst Root = () =>\n  <Provider store={store}>\n    <App />\n  </Provider>\n\nReactDOM.render(\n  <Root />,\n  document.getElementById('root')\n)\n\nregisterServiceWorker()"],"sourceRoot":""}